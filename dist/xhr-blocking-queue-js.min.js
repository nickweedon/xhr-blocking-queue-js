/*! xhr-blocking-queue-js 2015-12-19 */
define("xhr-blocking-queue-js",["xhr-adaptor-js"],function(a){function b(a,b,c){return function(d){(d||void 0===d)&&a.applyRealHandler(c),b.isBlocked=!1;var e=f.BlockingRequestQueueXHR.prototype.requestQueue;if(void 0!==e)for(;e.length>0;){var g=f.BlockingRequestQueueXHR.prototype.requestQueue.shift();g()}}}function c(a){for(var b in this.responseHandlerMap)if(this.responseHandlerMap.hasOwnProperty(b)&&new RegExp(b,"g").test(a))return Object.getPrototypeOf(this).responseHandlerMap[b];return null}function d(a){var b=this,d=c.call(this._xhr,this._xhr.getRequestURL());return null===d?void b.applyRealHandler(a):!this._xhr.bypassFilter&&d.isBlocked?(this._xhr.resend(),void console.debug("Failed to catch blocked request in time, ignoring response and adding request to queue.")):void d.invokeHandler(this,a)}var e=a,f=f||{},f=f||{};return f.BlockingRequestQueueXHR=function(a){this.openArgs=null,e.XHRWrapper.prototype.constructor.call(this,a)},f.BlockingRequestQueueXHR.prototype=Object.create(e.XHRWrapper.prototype),f.BlockingRequestQueueXHR.constructor=f.BlockingRequestQueueXHR,f.BlockingRequestQueueXHR.prototype.responseHandlerMap={},f.BlockingRequestQueueXHR.prototype.requestQueue=[],f.BlockingRequestQueueXHR.prototype.open=function(){this.openArgs=arguments,e.XHRWrapper.prototype.open.apply(this,this.openArgs)},f.BlockingRequestQueueXHR.prototype.send=function(){var a=this,b=arguments,d=c.call(this,this.getRequestURL());return!this.bypassFilter&&null!==d&&d.isBlocked?void f.BlockingRequestQueueXHR.prototype.requestQueue.push(function(){e.XHRWrapper.prototype.send.apply(a,b)}):void e.XHRWrapper.prototype.send.apply(a,b)},f.BlockingRequestQueueXHR.prototype.resend=function(){this.open.apply(this,this.openArgs),this.send.apply(this,arguments)},f.BlockingRequestQueueXHR.prototype.getRequestURL=function(){return null===this.openArgs||this.openArgs.length<2?null:this.openArgs[1]},f.BlockingRequestQueueXHR.prototype.getRequestVerb=function(){return null===this.openArgs||this.openArgs.length<1?null:this.openArgs[0]},f.BlockingRequestQueueXHR.prototype.registerResponseHandler=function(a,c,d){if(a in f.BlockingRequestQueueXHR.prototype.responseHandlerMap)return void console.error("Attempted to register handler for existing regex expression '"+a+"'");var e=this,g={handler:c,context:d||e,isBlocked:!1,invokeHandler:function(a,c){g.isBlocked=!0,g.handler.call(d,b(a,g,c),a._xhr)}};f.BlockingRequestQueueXHR.prototype.responseHandlerMap[a]=g},f.BlockingRequestQueueXHR.registerResponseHandler=f.BlockingRequestQueueXHR.prototype.registerResponseHandler,f.BlockingRequestQueueXHR.prototype.unregisterResponseHandler=function(a){delete f.BlockingRequestQueueXHR.prototype.responseHandlerMap[a]},f.BlockingRequestQueueXHR.unregisterResponseHandler=f.BlockingRequestQueueXHR.prototype.unregisterResponseHandler,f.BlockingRequestQueueXHR.prototype.clearResponseHandlers=function(){f.BlockingRequestQueueXHR.prototype.responseHandlerMap={}},f.BlockingRequestQueueXHR.clearResponseHandlers=f.BlockingRequestQueueXHR.prototype.clearResponseHandlers,f.BlockingRequestQueueXHR.prototype.eventDelegate={onreadystatechange:function(){var a=arguments,b=this._xhr;4==b.readyState?d.call(this,a):this.applyRealHandler(a)}},f});