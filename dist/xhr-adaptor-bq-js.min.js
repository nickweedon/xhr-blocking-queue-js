/*! xhr-adaptor-bq-js 2015-12-12 */
define("xhr-adaptor-bq-js",["xhr-adaptor-js"],function(a){function b(b,c,d){return function(e){(e||void 0===e)&&b.applyRealHandler(d),c.isBlocked=!1;var f=a.BlockingRequestQueueXHR.prototype.requestQueue;if(void 0!==f)for(;f.length>0;){var g=a.BlockingRequestQueueXHR.prototype.requestQueue.shift();g()}}}function c(a){for(var b in this.responseHandlerMap)if(this.responseHandlerMap.hasOwnProperty(b)&&new RegExp(b,"g").test(a))return Object.getPrototypeOf(this).responseHandlerMap[b];return null}function d(a){var b=this,d=c.call(this._xhr,this._xhr.getRequestURL());return null===d?void b.applyRealHandler(a):d.isBlocked?(this._xhr.resend(),void console.debug("Failed to catch blocked request in time, ignoring response and adding request to queue.")):void d.invokeHandler(this,a)}a=a||{};var a=a||{};return a.BlockingRequestQueueXHR=function(a){this.openArgs=null,this.parent().constructor.call(this,a)},a.BlockingRequestQueueXHR.prototype=Object.create(a.XHRWrapper.prototype),a.BlockingRequestQueueXHR.constructor=a.BlockingRequestQueueXHR,a.BlockingRequestQueueXHR.prototype.responseHandlerMap={},a.BlockingRequestQueueXHR.prototype.requestQueue=[],a.BlockingRequestQueueXHR.prototype.open=function(){this.openArgs=arguments,this.parent().open.apply(this,this.openArgs)},a.BlockingRequestQueueXHR.prototype.send=function(){var b=this,d=arguments,e=c.call(this,this.getRequestURL());return null!==e&&e.isBlocked?void a.BlockingRequestQueueXHR.prototype.requestQueue.push(function(){b.parent().send.apply(b,d)}):void b.parent().send.apply(b,d)},a.BlockingRequestQueueXHR.prototype.resend=function(){this.open.apply(this,this.openArgs),this.send.apply(this,arguments)},a.BlockingRequestQueueXHR.prototype.getRequestURL=function(){return null===this.openArgs||this.openArgs.length<2?null:this.openArgs[1]},a.BlockingRequestQueueXHR.prototype.getRequestVerb=function(){return null===this.openArgs||this.openArgs.length<1?null:this.openArgs[0]},a.BlockingRequestQueueXHR.prototype.registerResponseHandler=function(c,d,e){if(c in a.BlockingRequestQueueXHR.prototype.responseHandlerMap)return void console.error("Attempted to register handler for existing regex expression '"+c+"'");var f=this,g={handler:d,context:e||f,isBlocked:!1,invokeHandler:function(a,c){g.isBlocked=!0,g.handler.call(e,b(a,g,c),a._xhr)}};a.BlockingRequestQueueXHR.prototype.responseHandlerMap[c]=g},a.BlockingRequestQueueXHR.registerResponseHandler=a.BlockingRequestQueueXHR.prototype.registerResponseHandler,a.BlockingRequestQueueXHR.prototype.unregisterResponseHandler=function(b){delete a.BlockingRequestQueueXHR.prototype.responseHandlerMap[b]},a.BlockingRequestQueueXHR.unregisterResponseHandler=a.BlockingRequestQueueXHR.prototype.unregisterResponseHandler,a.BlockingRequestQueueXHR.prototype.clearResponseHandlers=function(){a.BlockingRequestQueueXHR.prototype.responseHandlerMap={}},a.BlockingRequestQueueXHR.clearResponseHandlers=a.BlockingRequestQueueXHR.prototype.clearResponseHandlers,a.BlockingRequestQueueXHR.prototype.eventDelegate={onreadystatechange:function(){var a=arguments,b=this._xhr;4==b.readyState?d.call(this,a):this.applyRealHandler(a)}},a});